// Generated by CoffeeScript 1.3.3
var fs, pathlib;

fs = require('fs');

pathlib = require('path');

module.exports = function(responderId, config, ss) {
  var backbone, backboneSync, client_api_registration, file_type, loadModel, model_conf, model_folder, name, underscore;
  name = config && config.name || 'backbone';
  model_conf = config.models || {};
  file_type = model_conf.file_type || "js";
  model_folder = model_conf.folder || "models";
  underscore = fs.readFileSync(__dirname + '/../vendor/lib/underscore-min.js', 'utf8');
  backbone = fs.readFileSync(__dirname + '/../vendor/lib/backbone-min.js', 'utf8');
  backboneSync = fs.readFileSync(__dirname + '/client.' + (process.env['SS_DEV'] && 'coffee' || 'js'), 'utf8');
  ss.client.send('code', 'init', underscore);
  ss.client.send('code', 'init', backbone);
  ss.client.send('code', 'init', backboneSync, {
    coffee: process.env['SS_DEV']
  });
  client_api_registration = fs.readFileSync(__dirname + '/register.' + (process.env['SS_DEV'] && 'coffee' || 'js'), 'utf8');
  ss.client.send('mod', 'ss-backbone', client_api_registration, {
    coffee: process.env['SS_DEV']
  });
  ss.client.send('code', 'init', "require('ss-backbone')(" + responderId + ", {}, require('socketstream').send(" + responderId + "));");
  ({
    name: name
  });
  loadModel = function(modelfile) {
    return require(modelfile)(ss);
  };
  return {
    interfaces: function(middleware) {
      return {
        websocket: function(msg, meta, send) {
          var dir, modelActions, modelfile, obj;
          obj = JSON.parse(msg);
          dir = pathlib.join(ss.root, "server/" + model_folder);
          modelfile = "" + dir + "/" + (obj.modelname.toLowerCase()) + "." + file_type;
          ss.log(msg);
          try {
            modelActions = loadModel(modelfile);
          } catch (e) {
            ss.log("Oops. No such model " + modelfile + " on the server");
            send("Oops. No such model " + modelfile + " on the server");
          }
          if (modelActions && modelActions[obj.method]) {
            return modelActions[obj.method](obj, meta, send);
          } else {
            return send("Action: '" + obj.method + "' not found");
          }
        }
      };
    }
  };
};
